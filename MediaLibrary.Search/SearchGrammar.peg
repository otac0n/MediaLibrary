@namespace MediaLibrary.Search
@classname SearchGrammar

search <Term> = _ t:conjunction _ EOF { t };

conjunction <Term> = d:disjunction<0,, WS> { d.Count == 1 ? d[0] : new ConjunctionTerm(d) };

disjunction <Term> = u:unary<1,, WS "or"i WS> { u.Count == 1 ? u[0] : new DisjunctionTerm(u) };

unary <Term>
    = "-" p:primary { new NegationTerm(p) }
    / primary;

primary <Term>
    = "(" _ t:conjunction _ (")" / EOF) { t }
    / "{" _ n:("" ([^}] / "}}" { "}" })+) _ "}" { new SavedSearchTerm(n) }
    / term;

term <Term>
    = field:"#" value:atom { new FieldTerm("tag", "<=", value) }
    / field:"!" value:atom { new FieldTerm("rejected", ">=", value) }
    / field:[@~?^+*] value:atom { new FieldTerm(field, value) }
    / field:atom op:(":" / ">=" / ">" / "<=" / "<") value:(atom / EOF / &(WS / ")")) { new FieldTerm(field, op, value) }
    / ":"? value:atom { new FieldTerm(null, value) }
    / "[" _ terms:prop<1,,_> _ "]" { new PropertyConjunctionTerm(terms) };

prop <PropertyPredicate>
    = property:atom op:(":" / ">=" / ">" / "<=" / "<") value:(atom / EOF / &(WS / "]")) { new PropertyPredicate(property, op, value) }
    / property:atom { new PropertyPredicate(property) }

atom
    = str:([^-" \t\r\n:(){}[\]<>][^" \t\r\n:(){}[\]<>]*)
    / '"' str:([^"] / '"' t:'"' { t })+ ('"' / EOF) { string.Concat(str) };

_ = "" WS?;

WS = "" [ \t\r\n]+;

EOF = !.;
